<?php

namespace App\Http\Controllers\Guru;

use App\Http\Controllers\Controller;
use App\Models\Assignment;
use App\Models\Subject;
use App\Models\Classroom;
use App\Models\SchoolClass;
use App\Models\Submission;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;

class AssignmentController extends Controller
{
    /**
     * Display a listing of assignments.
     *
     * @return \Illuminate\Http\Response
     */    public function index()
    {
        $teacher = Auth::user();
        
        $assignments = Assignment::where('teacher_id', $teacher->id)
            ->with(['subject', 'classes'])
            ->latest()
            ->paginate(10);
        
        // Get subjects taught by the teacher for filtering
        $subjects = Subject::whereHas('teachers', function ($query) use ($teacher) {
            $query->where('teacher_id', $teacher->id);
        })->orderBy('name')->get();
        
        // Get classes taught by the teacher for filtering
        $classes = Classroom::whereHas('subjects', function ($query) use ($teacher) {
            $query->whereHas('teachers', function ($q) use ($teacher) {
                $q->where('teacher_id', $teacher->id);
            });
        })->orderBy('name')->get();
            
        return view('guru.assignments.index', compact('assignments', 'subjects', 'classes'));
    }

    /**
     * Show the form for creating a new assignment.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $teacher = Auth::user();
        
        // Get subjects taught by the teacher
        $subjects = Subject::whereHas('teachers', function ($query) use ($teacher) {
            $query->where('teacher_id', $teacher->id);
        })->orderBy('name')->get();
        
        // Get classes taught by the teacher
        $classes = Classroom::whereHas('subjects', function ($query) use ($teacher) {
            $query->whereHas('teachers', function ($q) use ($teacher) {
                $q->where('teacher_id', $teacher->id);
            });
        })->orderBy('name')->get();
        
        return view('guru.assignments.create', compact('subjects', 'classes'));
    }

    /**
     * Store a newly created assignment in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $teacher = Auth::user();
        
        // Validate request        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'required|string',
            'subject_id' => 'required|exists:subjects,id',
            'deadline' => 'required|date',
            'classes' => 'required|array',
            'classes.*' => 'exists:school_classes,id',
            'file' => 'nullable|file|max:102400|mimes:pdf,doc,docx,xls,xlsx,ppt,pptx,zip,jpg,jpeg,png',
            'is_active' => 'sometimes|boolean',
        ]);
        
        try {
            DB::beginTransaction();
            
            // Create assignment
            $assignment = new Assignment();
            $assignment->title = $request->title;
            $assignment->description = $request->description;
            $assignment->subject_id = $request->subject_id;
            $assignment->teacher_id = $teacher->id;
            $assignment->deadline = $request->deadline;
            $assignment->is_active = $request->has('is_active');
            
            // Upload file if provided
            if ($request->hasFile('file')) {
                $file = $request->file('file');
                $path = $file->store('assignments');
                $assignment->file = $path;
            }
            
            $assignment->save();
            
            // Attach classes
            $assignment->classes()->attach($request->classes);
            
            DB::commit();
            
            return redirect()->route('guru.assignments.show', $assignment)
                ->with('success', 'Tugas berhasil dibuat.');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()->with('error', 'Terjadi kesalahan: ' . $e->getMessage())
                ->withInput();
        }
    }

    /**
     * Display the specified assignment.
     *
     * @param  \App\Models\Assignment  $assignment
     * @return \Illuminate\Http\Response
     */
    public function show(Assignment $assignment)
    {
        $teacher = Auth::user();
        
        // Check if the assignment belongs to the teacher
        if ($assignment->teacher_id != $teacher->id) {
            return redirect()->route('guru.assignments.index')
                ->with('error', 'Anda tidak memiliki akses ke tugas ini.');
        }
        
        // Get submission statistics
        $classes = $assignment->classes;
        
        $stats = [
            'total_students' => 0,
            'submitted' => 0,
            'graded' => 0,
            'late' => 0,
            'not_submitted' => 0,
        ];
        
        foreach ($classes as $class) {
            $stats['total_students'] += $class->students->count();
        }
        
        $submissions = $assignment->submissions;
        $stats['submitted'] = $submissions->count();
        $stats['graded'] = $submissions->whereNotNull('score')->count();
        $stats['late'] = $submissions->filter(function ($submission) use ($assignment) {
            return $submission->created_at > $assignment->deadline;
        })->count();
        $stats['not_submitted'] = $stats['total_students'] - $stats['submitted'];
        
        return view('guru.assignments.show', compact('assignment', 'stats'));
    }

    /**
     * Show the form for editing the specified assignment.
     *
     * @param  \App\Models\Assignment  $assignment
     * @return \Illuminate\Http\Response
     */
    public function edit(Assignment $assignment)
    {
        $teacher = Auth::user();
        
        // Check if the assignment belongs to the teacher
        if ($assignment->teacher_id != $teacher->id) {
            return redirect()->route('guru.assignments.index')
                ->with('error', 'Anda tidak memiliki akses ke tugas ini.');
        }
        
        // Get subjects taught by the teacher
        $subjects = Subject::whereHas('teachers', function ($query) use ($teacher) {
            $query->where('teacher_id', $teacher->id);
        })->orderBy('name')->get();
        
        // Get classes taught by the teacher
        $classes = Classroom::whereHas('subjects', function ($query) use ($teacher) {
            $query->whereHas('teachers', function ($q) use ($teacher) {
                $q->where('teacher_id', $teacher->id);
            });
        })->orderBy('name')->get();
        
        // Get selected classes
        $selectedClasses = $assignment->classes->pluck('id')->toArray();
        
        return view('guru.assignments.edit', compact('assignment', 'subjects', 'classes', 'selectedClasses'));
    }

    /**
     * Update the specified assignment in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\Assignment  $assignment
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Assignment $assignment)
    {
        $teacher = Auth::user();
        
        // Check if the assignment belongs to the teacher
        if ($assignment->teacher_id != $teacher->id) {
            return redirect()->route('guru.assignments.index')
                ->with('error', 'Anda tidak memiliki akses ke tugas ini.');
        }
        
        // Validate request
        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'required|string',
            'subject_id' => 'required|exists:subjects,id',
            'deadline' => 'required|date',
            'classes' => 'required|array',
            'classes.*' => 'exists:classrooms,id',
            'file' => 'nullable|file|max:102400|mimes:pdf,doc,docx,xls,xlsx,ppt,pptx,zip,jpg,jpeg,png',
            'is_active' => 'sometimes|boolean',
            'delete_file' => 'sometimes|boolean',
        ]);
        
        try {
            DB::beginTransaction();
            
            // Update assignment
            $assignment->title = $request->title;
            $assignment->description = $request->description;
            $assignment->subject_id = $request->subject_id;
            $assignment->deadline = $request->deadline;
            $assignment->is_active = $request->has('is_active');
            
            // Handle file
            if ($request->has('delete_file') && $assignment->file) {
                Storage::delete($assignment->file);
                $assignment->file = null;
            }
            
            if ($request->hasFile('file')) {
                // Delete old file if exists
                if ($assignment->file) {
                    Storage::delete($assignment->file);
                }
                
                $file = $request->file('file');
                $path = $file->store('assignments');
                $assignment->file = $path;
            }
            
            $assignment->save();
            
            // Sync classes
            $assignment->classes()->sync($request->classes);
            
            DB::commit();
            
            return redirect()->route('guru.assignments.show', $assignment)
                ->with('success', 'Tugas berhasil diperbarui.');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()->with('error', 'Terjadi kesalahan: ' . $e->getMessage())
                ->withInput();
        }
    }

    /**
     * Remove the specified assignment from storage.
     *
     * @param  \App\Models\Assignment  $assignment
     * @return \Illuminate\Http\Response
     */
    public function destroy(Assignment $assignment)
    {
        $teacher = Auth::user();
        
        // Check if the assignment belongs to the teacher
        if ($assignment->teacher_id != $teacher->id) {
            return redirect()->route('guru.assignments.index')
                ->with('error', 'Anda tidak memiliki akses ke tugas ini.');
        }
        
        try {
            DB::beginTransaction();
            
            // Delete file if exists
            if ($assignment->file) {
                Storage::delete($assignment->file);
            }
            
            // Delete all submissions and their files
            foreach ($assignment->submissions as $submission) {
                if ($submission->file_path) {
                    Storage::delete($submission->file_path);
                }
                
                $submission->delete();
            }
            
            // Detach classes
            $assignment->classes()->detach();
            
            // Delete assignment
            $assignment->delete();
            
            DB::commit();
            
            return redirect()->route('guru.assignments.index')
                ->with('success', 'Tugas berhasil dihapus.');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()->with('error', 'Terjadi kesalahan: ' . $e->getMessage());
        }
    }

    /**
     * View all submissions for an assignment.
     *
     * @param  \App\Models\Assignment  $assignment
     * @return \Illuminate\Http\Response
     */
    public function submissions(Assignment $assignment)
    {
        $teacher = Auth::user();
        
        // Check if the assignment belongs to the teacher
        if ($assignment->teacher_id != $teacher->id) {
            return redirect()->route('guru.assignments.index')
                ->with('error', 'Anda tidak memiliki akses ke tugas ini.');
        }
        
        // Get all submissions for this assignment
        $submissions = $assignment->submissions()
            ->with('user')
            ->latest()
            ->get();
        
        // Group submissions by class
        $classes = $assignment->classes;
        $submissionsByClass = [];
        
        foreach ($classes as $class) {
            $students = $class->students;
            $submissionsByClass[$class->id] = [
                'class' => $class,
                'students' => $students,
                'submissions' => $submissions->filter(function ($submission) use ($students) {
                    return $students->contains('id', $submission->user_id);
                }),
            ];
        }
        
        return view('guru.assignments.submissions', compact('assignment', 'submissionsByClass'));
    }
}
